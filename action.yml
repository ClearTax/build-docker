name: Build DockerImage
description: Build the Docker image and Push to ECR

inputs:
  aws_access_key_id:
    description: 'AWS Access Key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS Secret Access Key'
    required: true
  aws_region:
    description: 'AWS Region'
    default: 'ap-south-1'
  service:
    description: 'Array of services'
    required: true
  dockerfile:
    description: 'Dockerfile path'
    required: true
    default: 'Dockerfile'
  version:
    description: 'The version of the artifact'
    required: true
  build_args:
    description: 'Build arguments'
    required: false
    default: ''
  download_artifact:
    description: 'Download artifact'
    required: false
    default: 'true'
  multi_arch:
    description: 'Build multi arch image: linux/amd64,linux/arm64'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Fetch Artifacts
      if : ${{ inputs.download_artifact == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: artifacts-${{github.run_id}}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Set up QEMU
      if: ${{ inputs.multi_arch }}
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker - ${{ inputs.service }}
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ inputs.dockerfile }}
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.service }}:${{ inputs.version }}
        build-args: ${{ inputs.build_args }}
        push: true
        cache-from: type=gha, scope=${{ github.workflow }}
        cache-to: type=gha, mode=max, scope=${{ github.workflow }}
        platforms: ${{ inputs.multi_arch && "linux/amd64,linux/arm64" || "linux/amd64" }}
